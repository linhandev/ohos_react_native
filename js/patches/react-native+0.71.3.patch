diff --git a/node_modules/react-native/Libraries/Core/setUpErrorHandling.js b/node_modules/react-native/Libraries/Core/setUpErrorHandling.js
index 32846d4..b3734a9 100644
--- a/node_modules/react-native/Libraries/Core/setUpErrorHandling.js
+++ b/node_modules/react-native/Libraries/Core/setUpErrorHandling.js
@@ -18,6 +18,7 @@ const ExceptionsManager = require('./ExceptionsManager');
 ExceptionsManager.installConsoleErrorReporter();
 
 // Set up error handler
+global.__fbDisableExceptionsManager = true
 if (!global.__fbDisableExceptionsManager) {
   const handleError = (e: mixed, isFatal: boolean) => {
     try {
diff --git a/node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js b/node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js
index 121de3b..cd230c2 100644
--- a/node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js
+++ b/node_modules/react-native/Libraries/Image/NativeImageLoaderAndroid.js
@@ -34,4 +34,7 @@ export interface Spec extends TurboModule {
   +queryCache: (uris: Array<string>) => Promise<Object>;
 }
 
-export default (TurboModuleRegistry.getEnforcing<Spec>('ImageLoader'): Spec);
+// export default (TurboModuleRegistry.getEnforcing<Spec>('ImageLoader'): Spec);
+
+
+export default {}
\ No newline at end of file
diff --git a/node_modules/react-native/Libraries/Image/NativeImageLoaderIOS.js b/node_modules/react-native/Libraries/Image/NativeImageLoaderIOS.js
index b46a43b..9f0531b 100644
--- a/node_modules/react-native/Libraries/Image/NativeImageLoaderIOS.js
+++ b/node_modules/react-native/Libraries/Image/NativeImageLoaderIOS.js
@@ -34,4 +34,5 @@ export interface Spec extends TurboModule {
   +queryCache: (uris: Array<string>) => Promise<Object>;
 }
 
-export default (TurboModuleRegistry.getEnforcing<Spec>('ImageLoader'): Spec);
+// export default (TurboModuleRegistry.getEnforcing<Spec>('ImageLoader'): Spec);
+export default {}
diff --git a/node_modules/react-native/Libraries/ReactNative/NativeUIManager.js b/node_modules/react-native/Libraries/ReactNative/NativeUIManager.js
index df161a1..64eb0be 100644
--- a/node_modules/react-native/Libraries/ReactNative/NativeUIManager.js
+++ b/node_modules/react-native/Libraries/ReactNative/NativeUIManager.js
@@ -118,4 +118,92 @@ export interface Spec extends TurboModule {
   +dismissPopupMenu: () => void;
 }
 
-export default (TurboModuleRegistry.getEnforcing<Spec>('UIManager'): Spec);
+// export default (TurboModuleRegistry.getEnforcing<Spec>('UIManager'): Spec);
+
+class FakeUIManager implements Spec {
+  getConstants() {
+    return {};
+  }
+
+  getConstantsForViewManager(viewManagerName) {
+    return {
+        uiViewClassName: "RCTFakeComponent",
+        NativeProps: {},
+        bubblingEventTypes: {
+          topTouchStart: {
+            phasedRegistrationNames: {
+              bubbled: "onTouchStart",
+              captured: "onTouchStartCaptured"
+            }
+          },
+          topTouchEnd: {
+            phasedRegistrationNames: {
+              bubbled: "onTouchEnd",
+              captured: "onTouchEndCaptured"
+            }
+          },
+          topTouchMove: {
+            phasedRegistrationNames: {
+              bubbled: "onTouchMove",
+              captured: "onTouchMoveCaptured"
+            }
+          },
+          topTouchCancel: {
+            phasedRegistrationNames: {
+              bubbled: "onTouchCancel",
+              captured: "onTouchCancelCaptured"
+            }
+          },
+        }
+    };
+  }
+
+  getDefaultEventTypes() {
+    return [];
+  }
+
+  lazilyLoadView(name) {
+    return {};
+  }
+
+  createView(reactTag, viewName, rootTag, props) {}
+
+  updateView(reactTag, viewName, props) {}
+
+  focus(reactTag) {}
+
+  blur(reactTag) {}
+
+  findSubviewIn(reactTag, point, callback) {}
+
+  dispatchViewManagerCommand(reactTag, commandID, commandArgs) {}
+
+  measure(reactTag, callback) {}
+
+  measureInWindow(reactTag, callback) {}
+
+  viewIsDescendantOf(reactTag, ancestorReactTag, callback) {}
+
+  measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {}
+
+  measureLayoutRelativeToParent(reactTag, errorCallback, callback) {}
+
+  setJSResponder(reactTag, blockNativeResponder) {}
+
+  clearJSResponder() {}
+
+  configureNextLayoutAnimation(config, callback, errorCallback) {}
+
+  removeSubviewsFromContainerWithID(containerID) {}
+
+  replaceExistingNonRootView(reactTag, newReactTag) {}
+
+  setChildren(containerTag, reactTags) {}
+
+  manageChildren(
+    containerTag,
+    moveFromIndices,
+    moveToIndices,
+    addChildReactTags,
+    addAtIndices,
+    removeAtIndices
+  ) {}
+
+  setLayoutAnimationEnabledExperimental(enabled) {}
+
+  sendAccessibilityEvent(reactTag, eventType) {}
+
+  showPopupMenu(reactTag, items, error, success) {}
+
+  dismissPopupMenu() {}
+}
+
+export default new FakeUIManager();
diff --git a/node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js b/node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js
index c81d3fa..8c94b77 100644
--- a/node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js
+++ b/node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js
@@ -10,7 +10,7 @@
 
 import type {TurboModule} from '../TurboModule/RCTExport';
 
-import * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';
+// import * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';
 
 export type DisplayMetricsAndroid = {|
   width: number,
@@ -41,17 +41,34 @@ export interface Spec extends TurboModule {
   |};
 }
 
-const NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');
-let constants = null;
+// const NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');
+let constants = {
+    Dimensions: {
+        window: {
+            width: 0,
+            height: 0,
+            scale: 1,
+            fontScale: 1,
+        },
+        screen: {
+            width: 0,
+            height: 0,
+            scale: 1,
+            fontScale: 1,
+        },
+        windowPhysicalPixels: undefined,
+        screenPhysicalPixels: undefined,
+    }
+};
 
 const NativeDeviceInfo = {
   getConstants(): {|
     +Dimensions: DimensionsPayload,
     +isIPhoneX_deprecated?: boolean,
   |} {
-    if (constants == null) {
-      constants = NativeModule.getConstants();
-    }
+    // if (constants == null) {
+    //   constants = NativeModule.getConstants();
+    // }
     return constants;
   },
 };
diff --git a/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js b/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js
index e1329e8..ea2376c 100644
--- a/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js
+++ b/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js
@@ -34,6 +34,37 @@ export interface Spec extends TurboModule {
   +getAndroidID: () => string;
 }
 
-export default (TurboModuleRegistry.getEnforcing<Spec>(
-  'PlatformConstants',
-): Spec);
+// export default (TurboModuleRegistry.getEnforcing<Spec>(
+//   'PlatformConstants',
+// ): Spec);
+
+class FakePlatformConstants implements Spec {
+    getConstants() {
+        return {
+            isTesting: false,
+            reactNativeVersion: {
+                major: 0,
+                minor: 0,
+                patch: 0,
+                prerelease: null,
+            },
+            Version: 0,
+            Release: 'dummy_release',
+            Serial: 'dummy_serial',
+            Fingerprint: 'dummy_fingerprint',
+            Model: 'dummy_model',
+            ServerHost: 'dummy_server_host',
+            uiMode: 'dummy_ui_mode',
+            Brand: 'dummy_brand',
+            Manufacturer: 'dummy_manufacturer',
+        };
+    }
+
+    getAndroidID() {
+        return 'dummy_android_id';
+    }
+}
+  
+export default new FakePlatformConstants();
+
+
diff --git a/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsIOS.js b/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsIOS.js
index cf60d5e..22d5888 100644
--- a/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsIOS.js
+++ b/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsIOS.js
@@ -28,6 +28,8 @@ export interface Spec extends TurboModule {
   |};
 }
 
-export default (TurboModuleRegistry.getEnforcing<Spec>(
-  'PlatformConstants',
-): Spec);
+// export default (TurboModuleRegistry.getEnforcing<Spec>(
+//   'PlatformConstants',
+// ): Spec);
+
+export default {}
\ No newline at end of file
diff --git a/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js b/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js
index 6d0efb5..85113c7 100644
--- a/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js
+++ b/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js
@@ -56,7 +56,7 @@ const _cookies: {[key: string]: number, ...} = {};
 const PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;
 
 export const getCurrentTimestamp: () => number =
-  global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);
+  global.nativeQPLTimestamp ?? global.performance ? global.performance.now.bind(global.performance) : Date.now;
 
 class PerformanceLogger implements IPerformanceLogger {
   _timespans: {[key: string]: ?Timespan} = {};
diff --git a/node_modules/react-native/scripts/.packager.bat b/node_modules/react-native/scripts/.packager.bat
new file mode 100644
index 0000000..e89260e
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.bat
@@ -0,0 +1 @@
+set RCT_METRO_PORT=8081
\ No newline at end of file
